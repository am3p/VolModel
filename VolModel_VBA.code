Option Explicit
Option Base 1

' Structure: Exchange option data
Public Type OptData
    CP As Long
    ttm As Single
    Strike As Single
    price As Single
    impv As Single
End Type

' Structure: Parameters necessary to calculate Black vol
Public Type MarketParam
    ttm As Single
    f As Single
    rf As Single
End Type

' Structure: SABR parameters
Public Type SABRParam
    ttm As Single
    alpha As Single
    rho As Single
    nu As Single
    f As Single
    rf As Single        'average integrated interest rate
End Type

' Structure: SABR parameter series along maturities
Public Type SABRParamSeries
    p(1 To 20) As SABRParam
    t(1 To 20) As Single
    size As Long
End Type

' Structure: Option data for a single maturity and SABR parameter
Public Type SABRData
    size As Long
    p As SABRParam
    opt(1 To 500) As OptData
End Type

' Structure: risk-free rate curve
Public Type RateCurve
    t(1 To 50) As Single
    r(1 To 50) As Single
    size As Long
End Type

' Structure: volatility surface
Public Type VolSurf
    t(1 To 20) As Single
    k(1 To 20) As Single
    vol(1 To 400) As Single
End Type

' C++ DLL: Black vol calculator
Public Declare Function BlackVolCalc Lib "C:\Users\Administrator\Desktop\Project\ELS\ELS_MC_Module_v1\Release\ELS_MC_Module_v1.dll" _
                                     (opt As OptData, p As MarketParam) As Single

' C++ DLL: SABR parameter calculation (raw fitting)
Public Declare Function SABRCalc_AllParam Lib "C:\Users\Administrator\Desktop\Project\ELS\ELS_MC_Module_v1\Release\ELS_MC_Module_v1.dll" _
                                          (data As SABRData) As SABRParam

' C++ DLL: SABR parameter calculation (applying some adjustment)
Public Declare Function SABRCalc_Adjust Lib "C:\Users\Administrator\Desktop\Project\ELS\ELS_MC_Module_v1\Release\ELS_MC_Module_v1.dll" _
                                        (ExpSize As Long, skipind As Long, data As SABRData, nu_a As Single, nu_b As Single) As SABRParamSeries
                                        
' C++ DLL: Parameter extension
Public Declare Function ParamExt Lib "C:\Users\Administrator\Desktop\Project\ELS\ELS_MC_Module_v1\Release\ELS_MC_Module_v1.dll" _
                                 (p0 As SABRParamSeries, skipind As Long, _
                                  nu_a_ As Single, nu_b_ As Single, nu0skipind As Single, _
                                  alpha_first As Single, exp_first As Single, _
                                  S0 As Single, rc As RateCurve, q As Single) As SABRParamSeries

' C++ DLL: Local volatility calculation
Public Declare Function LocalVolCalcSABR Lib "C:\Users\Administrator\Desktop\Project\ELS\ELS_MC_Module_v1\Release\ELS_MC_Module_v1.dll" _
                                         (p As SABRParamSeries, S0 As Single, q As Single) As VolSurf

' C++ DLL: Local volatility calculation
Public Declare Function LocalVolCalcVar Lib "C:\Users\Administrator\Desktop\Project\ELS\ELS_MC_Module_v1\Release\ELS_MC_Module_v1.dll" _
                                        (vs As VolSurf, F0 As Single, S0 As Single) As VolSurf


' Subroutine: Implied forward calculation: use in the Black volatility calculation
' Rule: Forward = Strike * exp(rf*T) * (Call - Put) which absolute call-put spread is the smallest
Sub ExtractImpForward()

Dim i As Integer, j As Integer, ind As Integer
Dim cp_diff As Single, ttm As Long, rf As Single, rf_spot As Single

i = 1
j = 1
ind = 1
cp_diff = 100000
ttm = Range("OptionData")(1, 1).Value

' Find the smallest call-put spread throughout options of the same maturity
Do While Range("OptionData")(i, 1).Value > 0
    If ttm <> Range("OptionData")(i, 1).Value Then
        rf = Range("OptionData")(ind, 6).Value
        rf_spot = Range("OptionData")(ind, 7).Value
        Range("OptionMarketParam")(j, 1).Value = Range("OptionData")(ind, 1).Value
        Range("OptionMarketParam")(j, 2).Value = Range("OptionData")(ind, 2).Value + _
                                                 Exp(rf * Range("OptionData")(ind, 1).Value / 365) * (Range("OptionData")(ind, 4).Value - Range("OptionData")(ind + 1, 4).Value)
        Range("OptionMarketParam")(j, 3).Value = rf
        Range("OptionMarketParam")(j, 4).Value = rf_spot
        ttm = Range("OptionData")(i, 1).Value
        cp_diff = 100000
        j = j + 1
    End If
        
    If cp_diff > Abs(Range("OptionData")(i, 4).Value - Range("OptionData")(i + 1, 4).Value) Then
       cp_diff = Abs(Range("OptionData")(i, 4).Value - Range("OptionData")(i + 1, 4).Value)
       ind = i
    End If

    i = i + 2
Loop

' Arrange result
rf = Range("OptionData")(ind, 6).Value
rf_spot = Range("OptionData")(ind, 7).Value
Range("OptionMarketParam")(j, 1).Value = Range("OptionData")(ind, 1).Value
Range("OptionMarketParam")(j, 2).Value = Range("OptionData")(ind, 2).Value + _
                                         Exp(rf * Range("OptionData")(ind, 1).Value / 365) * (Range("OptionData")(ind, 4).Value - Range("OptionData")(ind + 1, 4).Value)
Range("OptionMarketParam")(j, 3).Value = rf
Range("OptionMarketParam")(j, 4).Value = rf_spot

End Sub

' Subroutine: Calculate and arrange Black volatility for each option
' If the volatility is not calculated or not in (0.001% ~ 100%) range, return -1
Sub BlackVol()
    
Dim i As Integer, j As Integer
Dim opt As OptData, p As MarketParam
Dim impv As Single

i = 1
j = 1

Do While Range("OptionData")(i, 1).Value > 0
    If Range("OptionData")(i, 1).Value <> Range("OptionMarketParam")(j, 1).Value Then
        Do While Range("OptionData")(i, 1).Value <> Range("OptionMarketParam")(j, 1).Value
            j = j + 1
        Loop
    End If
    
    ' Arrange option infomation
    opt.ttm = Range("OptionData")(i, 1).Value / 365
    opt.Strike = Range("OptionData")(i, 2).Value
    If Range("OptionData")(i, 3).Value = "C" Then
        opt.CP = 1
    ElseIf Range("OptionData")(i, 3).Value = "P" Then
        opt.CP = -1
    End If
    opt.price = Range("OptionData")(i, 4).Value
    
    p.f = Range("OptionMarketParam")(j, 2).Value
    p.rf = Range("OptionMarketParam")(j, 3).Value
    
    ' Call C++ DLL
    Range("OptionData")(i, 8).Value = BlackVolCalc(opt, p)
    
    i = i + 1
Loop

End Sub

' Subroutine: Sample selection to calculate SABR parameter
Sub SABRSampleSelect()

Dim i As Long, j As Long, l As Long, m As Long, size As Long
Dim data As SABRData, SABRp0 As SABRParam, SABRp1 As SABRParam
Dim obs As Long, min_price As Double

' Minimum price limit (KOSPI - 0.01 / HSCEI - 1)
' Seperate sample selection criterion along maturities (KOSPI - 11 / HSCEI - 2)
If Worksheets("Implied Vol").Range("B2").Value = "KOSPI200" Then
    min_price = 0.01
    obs = 11
ElseIf Worksheets("Implied Vol").Range("B2").Value = "HSCEI" Then
    min_price = 1
    obs = 2
End If

i = 1
j = 1
Do While Range("OptionData")(i, 1).Value > 0 And Len(Range("OptionData")(i, 1)) > 0
    ' Move to the samples of selected maturity
    If Range("OptionData")(i, 1).Value <> Range("OptionMarketParam")(j, 1).Value Then
        Do While Range("OptionData")(i, 1).Value <> Range("OptionMarketParam")(j, 1).Value
            j = j + 1
        Loop
    End If
    
    ' Remove options with unappropriate Black volatility
    If Range("OptionData")(i, 8) = -1 Then
        Range("OptionData")(i, 10).Value = "X"
        
    ' Remove call options whose strike is less than 97.5% of the spot
    ElseIf Range("OptionData")(i, 3) = "C" And Range("OptionData")(i, 2) < 0.975 * Range("OptionMarketParam")(j, 2) Then
        Range("OptionData")(i, 10).Value = "X"
        
    ' Remove call options whose strike is less than 102.5% of the spot
    ElseIf Range("OptionData")(i, 3) = "P" And Range("OptionData")(i, 2) > 1.025 * Range("OptionMarketParam")(j, 2) Then
        Range("OptionData")(i, 10).Value = "X"
        
    ' Remove options with no volumes in the nth maturity (n <= obs)
    ElseIf (Range("OptionData")(i, 5) = 0 Or Range("OptionData")(i, 5) = "#N/A N/A") And j <= obs Then
        Range("OptionData")(i, 10).Value = "X"
        
    ' Remove call options with minimum price for in the nth maturity (n > obs) when minimum price is occured for smaller strike
    ElseIf Range("OptionData")(i, 3) = "C" And j > obs And Range("OptionData")(i, 4).Value = min_price And _
           Range("OptionData")(i + 1, 4) = Range("OptionData")(i, 4) And _
           Range("OptionData")(i + 1, 1) = Range("OptionData")(i, 1) Then
        Range("OptionData")(i, 10).Value = "X"
        
    ' Remove put options with minimum price for in the nth maturity (n > obs) when minimum price is occured for larger strike
    ElseIf Range("OptionData")(i, 3) = "P" And j > obs And Range("OptionData")(i, 4).Value = min_price And _
           Range("OptionData")(i - 1, 4) = Range("OptionData")(i, 4) And _
           Range("OptionData")(i - 1, 1) = Range("OptionData")(i, 1) Then
        Range("OptionData")(i - 1, 10).Value = "X"
        
    ' Others are OK to be selected
    Else
        Range("OptionData")(i, 10).Value = "O"
    End If
    i = i + 1
Loop

End Sub

'Subroutine: Fit SABR parameter to option data (raw fitting)
Sub SABRFit()

Dim i As Long, j As Long, l As Long, m As Long, size As Long
Dim data As SABRData, SABRp0 As SABRParam, SABRp1 As SABRParam
Dim opt_blank As OptData

i = 1
j = 1
m = 1
Do While Range("OptionMarketParam")(i, 1).Value > 0
    For l = 1 To UBound(data.opt)
        data.opt(l) = opt_blank
    Next l

    ' Load time to maturity / implied forward / risk-free rate
    data.p.ttm = Range("OptionMarketParam")(i, 1).Value
    data.p.f = Range("OptionMarketParam")(i, 2).Value
    data.p.rf = Range("OptionMarketParam")(i, 3).Value
        
    ' Count available sample data for the maturity
    data.size = 0
    Do While Range("OptionData")(j, 1).Value = Range("OptionMarketParam")(i, 1).Value
        j = j + 1
        If Range("OptionData")(j, 10).Value = "O" Then
            data.size = data.size + 1
        End If
    Loop

    ' Fit when avilable sample is 5 or more
    If data.size > 5 Then
        l = 1
        Do While Range("OptionData")(m, 1).Value = data.p.ttm
            If Range("OptionData")(m, 10).Value = "O" Then
                data.opt(l).ttm = Range("OptionData")(m, 1).Value
                data.opt(l).Strike = Range("OptionData")(m, 2).Value
                If Range("OptionData")(m, 3).Value = "C" Then
                    data.opt(l).CP = 1
                ElseIf Range("OptionData")(m, 3).Value = "P" Then
                    data.opt(l).CP = -1
                End If
                data.opt(l).impv = Range("OptionData")(m, 8).Value
                l = l + 1
            End If
            m = m + 1
        Loop
    
        ' Initial SABR parameter
        data.p.alpha = 0.1
        data.p.rho = -0.5
        data.p.nu = 0.5
        
        ' Call C++ DLL
        SABRp1 = SABRCalc_AllParam(data)
        
        ' Arrange result
        Range("SABRFitParam")(i, 1).Value = data.p.ttm
        Range("SABRFitParam")(i, 2).Value = SABRp1.alpha
        Range("SABRFitParam")(i, 3).Value = SABRp1.rho
        Range("SABRFitParam")(i, 4).Value = SABRp1.nu
    Else
        ' Move to next maturity sample
        m = j
    End If
    
    i = i + 1
Loop

End Sub

'Subroutine: Fit SABR parameter to option data (adjusted fitting)
Sub SABRFitAdj()

Dim i As Long, j As Long, l As Long, obs As Long, skipind As Long
Dim data() As SABRData, SABRp1 As SABRParamSeries

' Seperate sample selection criterion along maturities (KOSPI - 11 / HSCEI - 2)
If Worksheets("Implied Vol").Range("B2").Value = "KOSPI200" Then
    obs = 11
ElseIf Worksheets("Implied Vol").Range("B2").Value = "HSCEI" Then
    obs = 2
End If
' Maturities to maintain the first stage SABR fit result
skipind = 2

' Set initial SABR parameter series by raw fit result
ReDim data(1 To obs)
For i = 1 To obs
    data(i).p.ttm = Range("OptionMarketParam")(i, 1).Value
    If Range("SABRFitParam")(i, 2).Value > 0 Then
        data(i).p.alpha = Range("SABRFitParam")(i, 2).Value
    Else
        ' If some maturities do not have raw SABR result, set alpha to original initial value
        data(i).p.alpha = 0.1
    End If
    data(i).p.f = Range("OptionMarketParam")(i, 2).Value
    data(i).p.rf = Range("OptionMarketParam")(i, 3).Value
    data(i).size = 0
Next i

i = 1
j = 1
l = 1
' Arrange all appropriate option data samples
Do While Range("OptionData")(i, 1).Value > 0 And Len(Range("OptionData")(i, 1)) > 0
    If Range("OptionData")(i, 1).Value <> data(j).p.ttm Then
        Do While Range("OptionData")(i, 1).Value <> data(j).p.ttm And j < UBound(data)
            j = j + 1
        Loop
        l = 1
    End If
    
    If Range("OptionData")(i, 10).Value = "O" Then
        data(j).opt(l).ttm = Range("OptionData")(i, 1).Value
        data(j).opt(l).Strike = Range("OptionData")(i, 2).Value
        If Range("OptionData")(i, 3).Value = "C" Then
            data(j).opt(l).CP = 1
        ElseIf Range("OptionData")(i, 3).Value = "P" Then
            data(j).opt(l).CP = -1
        End If
        data(j).opt(l).impv = Range("OptionData")(i, 8).Value
        data(j).size = data(j).size + 1
        l = l + 1
    End If
        
    i = i + 1
Loop

' Load regression coefficients for the parameter nu
i = 1
Dim nu_a As Single, nu_b As Single
Do While Worksheets("SABR param").Cells(i + 1, 10).Value < Worksheets("Implied Vol").Range("B1").Value
    i = i + 1
Loop
nu_a = Worksheets("SABR param").Cells(i + 1, 11).Value
nu_b = Worksheets("SABR param").Cells(i + 1, 12).Value

' Call C++ DLL
SABRp1 = SABRCalc_Adjust(obs, skipind, data(1), nu_a, nu_b)

' Arrange adjusted fit result
For i = 1 To obs
    If i <= skipind Then
        For j = 1 To 4
            Range("SABRFitParamAdj")(i, j).Value = Range("SABRFitParam")(i, j).Value
        Next j
    ElseIf SABRp1.p(i).alpha > 0 Then
        Range("SABRFitParamAdj")(i, 1).Value = data(i).p.ttm
        Range("SABRFitParamAdj")(i, 2).Value = SABRp1.p(i).alpha
        Range("SABRFitParamAdj")(i, 3).Value = SABRp1.p(i).rho
        Range("SABRFitParamAdj")(i, 4).Value = SABRp1.p(i).nu
    End If
Next i

End Sub

' Subroutine: SABR parameter interp/extrapolation for the predetermined time to expiry
Sub SABRParamExt()

Dim i As Integer, j As Integer
Dim p0 As SABRParamSeries, skipind As Long
Dim nu_a As Single, nu_b As Single, nu_skipind As Single
Dim alpha_first As Single, exp_first As Single

' Maturities to maintain the first stage SABR fit result
skipind = 3
p0.size = 0
alpha_first = -1
exp_first = -1

' Load regression coefficients for the parameter nu
i = 1
Do While Worksheets("SABR param").Cells(i + 1, 10).Value < Worksheets("Implied Vol").Range("B1").Value
    i = i + 1
Loop
nu_a = Worksheets("SABR param").Cells(i + 1, 11).Value
nu_b = Worksheets("SABR param").Cells(i + 1, 12).Value

' Temporary part: Load index spot price and dividend yield (KOSPI200: column 1, HSCEI: column 5)
Dim S0 As Single, q As Single, col_ind As Integer
If Worksheets("Implied Vol").Range("B2").Value = "KOSPI200" Then
    col_ind = 1
ElseIf Worksheets("Implied Vol").Range("B2").Value = "HSCEI" Then
    col_ind = 5
End If
i = 2
Do While Worksheets("Index History").Cells(i + 1, col_ind).Value < Worksheets("Implied Vol").Range("B1").Value
    i = i + 1
Loop
S0 = Worksheets("Index History").Cells(i + 1, col_ind + 1).Value
q = Worksheets("Index History").Cells(i + 1, col_ind + 2).Value

' Temporary part: Load risk-free rate curve (KOSPI200: Curve History (KRW), HSCEI: Curve History (HKD))
Dim rc As RateCurve, rc_wrkst As String
If Worksheets("Implied Vol").Range("B2").Value = "KOSPI200" Then
    rc_wrkst = "Curve History (KRW)"
ElseIf Worksheets("Implied Vol").Range("B2").Value = "HSCEI" Then
    rc_wrkst = "Curve History (HKD)"
End If
i = 1
rc.size = 0
Do While Worksheets(rc_wrkst).Cells(1, i + 1).Value > 0
    rc.t(i) = Worksheets(rc_wrkst).Cells(1, i + 1).Value
    rc.size = rc.size + 1
    i = i + 1
Loop
i = 1
Do While Worksheets(rc_wrkst).Cells(i + 1, 1).Value < Worksheets("Implied Vol").Range("B1").Value
    i = i + 1
Loop
If Worksheets(rc_wrkst).Cells(i + 1, 1).Value <> Worksheets("Implied Vol").Range("B1").Value Then
    i = i - 1
End If
For j = 1 To rc.size
    rc.r(j) = Worksheets(rc_wrkst).Cells(i + 1, j + 1).Value
Next j

' Arrange SABR adjusted fit parameter
i = 1
Do While Range("OptionMarketParam")(i, 1).Value > 0
    ' If the SABR parameter of the first expiry is well-defined
    If Range("SABRFitParamAdj")(i, 1).Value > 0 Then
        ' If the first expiry is less than five days, skip it and just consider alpha
        If i = 1 And Range("SABRFitParamAdj")(i, 1).Value <= 5 Then
            skipind = skipind - 1
            alpha_first = Range("SABRFitParamAdj")(i, 2).Value
            exp_first = Range("SABRFitParamAdj")(i, 1).Value
        Else
            p0.size = p0.size + 1
            p0.t(p0.size) = Range("SABRFitParamAdj")(i, 1).Value
            p0.p(p0.size).alpha = Range("SABRFitParamAdj")(i, 2).Value
            p0.p(p0.size).rho = Range("SABRFitParamAdj")(i, 3).Value
            p0.p(p0.size).nu = Range("SABRFitParamAdj")(i, 4).Value
            p0.p(p0.size).f = Range("OptionMarketParam")(i, 2).Value
        End If
        ' nu parameter of (skipind+1)th maturity; necessary in interpolation step
        If i = skipind Then
            nu_skipind = Range("SABRFitParamAdj")(i, 4).Value
        End If
        
    ' If the SABR parameter of the first expiry is not defined
    Else
        If i = skipind Then
            j = i
            Do While Range("SABRFitParamAdj")(j, 1).Value = 0
                j = j - 1
            Loop
            skipind = skipind - 1
            nu_skipind = Range("SABRFitParamAdj")(j, 4).Value
        End If
    End If
    
    i = i + 1
Loop

' CALL C++ DLL
Dim p1 As SABRParamSeries
p1 = ParamExt(p0, skipind, nu_a, nu_b, nu_skipind, alpha_first, exp_first, S0, rc, q)

' Arrange result
For i = 1 To p1.size
    Range("SABRFitParamExt")(i, 1).Value = p1.t(i)
    Range("SABRFitParamExt")(i, 2).Value = p1.p(i).f
    Range("SABRFitParamExt")(i, 3).Value = p1.p(i).rf
    Range("SABRFitParamExt")(i, 4).Value = p1.p(i).alpha
    Range("SABRFitParamExt")(i, 5).Value = p1.p(i).rho
    Range("SABRFitParamExt")(i, 6).Value = p1.p(i).nu
Next i

End Sub

' Subroutine: SABR parameter interp/extrapolation for the predetermined time to expiry
Sub LocalVol()

Dim i As Integer, j As Integer
Dim p0 As SABRParamSeries, S0 As Single, q As Single
p0.size = 0

i = 1
Do While Range("SABRFitParamExt")(i, 1).Value > 0
    p0.size = p0.size + 1
    p0.t(p0.size) = Range("SABRFitParamExt")(i, 1).Value
    p0.p(p0.size).f = Range("SABRFitParamExt")(i, 2).Value
    p0.p(p0.size).rf = Range("SABRFitParamExt")(i, 3).Value
    p0.p(p0.size).alpha = Range("SABRFitParamExt")(i, 4).Value
    p0.p(p0.size).rho = Range("SABRFitParamExt")(i, 5).Value
    p0.p(p0.size).nu = Range("SABRFitParamExt")(i, 6).Value
        
    i = i + 1
Loop

' KOSPI200: column 1 / HSCEI: column 5
i = 2
Do While Worksheets("Index History").Cells(i + 1, 1).Value < Worksheets("Implied Vol").Range("B1").Value
    i = i + 1
Loop
S0 = Worksheets("Index History").Cells(i + 1, 2).Value
q = Worksheets("Index History").Cells(i + 1, 3).Value

Dim vs As VolSurf
vs = LocalVolCalc(p0, S0, q)

Dim ind As Long
ind = Worksheets("Local Vol").Range("A1")
Worksheets("Local Vol").Cells(ind, 3).Value = Worksheets("Implied Vol").Range("B1").Value
For i = 1 To 15
    Worksheets("Local Vol").Cells(ind, 4 + i).Value = 60 + (i - 1) * 5
Next i

For i = 1 To 10
    Worksheets("Local Vol").Cells(ind + i, 4).Value = vs.t(i)
    For j = 1 To 15
        Worksheets("Local Vol").Cells(ind + i, 4 + j).Value = vs.vol((i - 1) * 15 + j)
    Next j
Next i

Worksheets("Local Vol").Range("A1") = Worksheets("Local Vol").Range("A1") + 12

End Sub

' Subroutine: Draw implied/local volatility surface by SABR parameter
Sub SABRVolSurf()

    Dim i As Integer, j As Integer
    Dim t As Single, S0 As Single, k As Single, F0 As Single
    Dim alpha As Single, rho As Single, nu As Single
    Dim alpha_p As Single, rho_p As Single, nu_p As Single, F0_p As Single
    Dim alpha_m As Single, rho_m As Single, nu_m As Single, F0_m As Single
    Dim K_p As Single, K_m As Single
    Dim rng_param As Range, rng_surf As Range, rng_var_surf As Range, rng_var_surf_diff As Range
    Dim rng_lv_surf As Range, rng_lv_surf2 As Range
    Set rng_param = Worksheets("SABR Impvol").Range("A4")
    Set rng_surf = Worksheets("SABR Impvol").Range("A16")
    Set rng_var_surf = Worksheets("SABR Impvol").Range("A29")
    Set rng_var_surf_diff = Worksheets("SABR Impvol").Range("A42")
    Set rng_lv_surf = Worksheets("SABR Impvol").Range("A55")
    Set rng_lv_surf2 = Worksheets("SABR Impvol").Range("A68")
    
    S0 = Worksheets("SABR Impvol").Range("B2").Value
    For i = 1 To 15
        rng_surf.Offset(0, i).Value = S0 * (0.6 + CSng(i - 1) * 0.05)
        rng_var_surf.Offset(0, i).Value = S0 * (0.6 + CSng(i - 1) * 0.05)
        rng_var_surf_diff.Offset(0, i).Value = S0 * (0.6 + CSng(i - 1) * 0.05)
        rng_lv_surf.Offset(0, i).Value = S0 * (0.6 + CSng(i - 1) * 0.05)
        rng_lv_surf2.Offset(0, i).Value = S0 * (0.6 + CSng(i - 1) * 0.05)
    Next i
    
    Dim z As Single, xz As Single, impv As Single, t_eps As Single, K_eps As Single
    Dim dvdt As Single, dvdK As Single, d2vdK2 As Single
    Dim dwdt As Single, dwdy As Single, d2wdy2 As Single
    Dim y As Single, f As Single, df As Single, d2f As Single, fs As Single, fl As Single, d1 As Single
    Dim impv_Kp As Single, impv_Km As Single, impv_tp As Single, impv_tm As Single
    Dim var As Single, var_Kp As Single, var_Km As Single, var_tp As Single, var_tm As Single
    Dim lv_nom1 As Single, lv_denom1 As Single, lv_nom2 As Single, lv_denom2 As Single
    t_eps = 0.0001
    
    j = 1
    Do While rng_param.Offset(j, 0) > 0
        t = rng_param.Offset(j, 0) / 360#
        F0 = rng_param.Offset(j, 1).Value
        alpha = rng_param.Offset(j, 3).Value
        rho = rng_param.Offset(j, 4).Value
        nu = rng_param.Offset(j, 5).Value
        
        rng_surf.Offset(j, 0).Value = rng_param.Offset(j, 0).Value
        rng_var_surf.Offset(j, 0).Value = rng_param.Offset(j, 0).Value
        rng_var_surf_diff.Offset(j, 0).Value = rng_param.Offset(j, 0).Value
        rng_lv_surf.Offset(j, 0).Value = rng_param.Offset(j, 0).Value
        rng_lv_surf2.Offset(j, 0).Value = rng_param.Offset(j, 0).Value
        
        If rng_param.Offset(j + 1, 0) = 0 Then
            alpha_p = alpha + (alpha - rng_param.Offset(j - 1, 3)) / (t - rng_param.Offset(j - 1, 0) / 360#) * t_eps
            rho_p = rho + (rho - rng_param.Offset(j - 1, 4)) / (t - rng_param.Offset(j - 1, 0) / 360#) * t_eps
            nu_p = nu + (nu - rng_param.Offset(j - 1, 5)) / (t - rng_param.Offset(j - 1, 0) / 360#) * t_eps
            F0_p = F0 + (F0 - rng_param.Offset(j - 1, 1)) / (t - rng_param.Offset(j - 1, 0) / 360#) * t_eps
        Else
            alpha_p = alpha + (rng_param.Offset(j + 1, 3) - alpha) / (rng_param.Offset(j + 1, 0) / 360# - t) * t_eps
            rho_p = rho + (rng_param.Offset(j + 1, 4) - rho) / (rng_param.Offset(j + 1, 0) / 360# - t) * t_eps
            nu_p = nu + (rng_param.Offset(j + 1, 5) - nu) / (rng_param.Offset(j + 1, 0) / 360# - t) * t_eps
            F0_p = F0 + (rng_param.Offset(j + 1, 1) - F0) / (rng_param.Offset(j + 1, 0) / 360# - t) * t_eps
        End If
        
        If rng_param.Offset(j - 1, 0) = "TTM" Then
            alpha_m = alpha + (rng_param.Offset(j + 1, 3) - alpha) / (rng_param.Offset(j + 1, 0) / 360# - t) * -t_eps
            rho_m = rho + (rng_param.Offset(j + 1, 4) - rho) / (rng_param.Offset(j + 1, 0) / 360# - t) * -t_eps
            nu_m = nu + (rng_param.Offset(j + 1, 5) - nu) / (rng_param.Offset(j + 1, 0) / 360# - t) * -t_eps
            F0_m = F0 + (rng_param.Offset(j, 1) - S0) / (rng_param.Offset(j, 0) / 360#) * -t_eps
        Else
            alpha_m = alpha + (alpha - rng_param.Offset(j - 1, 3)) / (t - rng_param.Offset(j - 1, 0) / 360#) * -t_eps
            rho_m = rho + (rho - rng_param.Offset(j - 1, 4)) / (t - rng_param.Offset(j - 1, 0) / 360#) * -t_eps
            nu_m = nu + (nu - rng_param.Offset(j - 1, 5)) / (t - rng_param.Offset(j - 1, 0) / 360#) * -t_eps
            F0_m = F0 + (F0 - rng_param.Offset(j - 1, 1)) / (t - rng_param.Offset(j - 1, 0) / 360#) * -t_eps
        End If
        
        For i = 1 To 15
            k = rng_surf.Offset(0, i).Value
            y = WorksheetFunction.Ln(F0 / k)
            If Abs(1 / y) > 0.001 Then
                K_eps = Abs(1 / y) * 0.0001
            Else
                K_eps = 0.00001
            End If
            
            y = nu / alpha * WorksheetFunction.Ln(F0 / k)
            If Abs(y) <= 0.01 Then
                f = 1 - rho * y / 2 + (-rho * rho / 4 + 1 / 6) * y * y
                df = -rho / 2 + 2 * (-rho * rho / 4 + 1 / 6) * y - 1 / 8 * (6 * rho * rho - 5) * rho * y * y
                d2f = 2 * (-rho * rho / 4 + 1 / 6) - 1 / 4 * (6 * rho * rho - 5) * rho * y + 12 * (-5 / 16 * rho * rho * rho * rho + rho * rho / 3 - 17 / 360) * y * y
            Else
                fs = Sqr(1 - 2 * rho * y + y * y)
                fl = WorksheetFunction.Ln((fs - rho + y) / (1 - rho))
                f = y / fl
                df = (fl * fs - y) / (fl * fl * fs)
                d2f = (fl * (3 * rho * y - y * y - 2) + 2 * fs * y) / (fl * fl * fl * fs * fs * fs)
            End If
            impv = alpha * f * (1 + (0.25 * rho * nu * alpha + (2 - 3 * rho * rho) / 24 * nu * nu) * t)
            dvdK = -nu * df / k * (1 + (0.25 * rho * nu * alpha + (2 - 3 * rho * rho) / 24 * nu * nu) * t)
            d2vdK2 = (nu * df / k / k + nu * nu * d2f / alpha / k / k) * (1 + (0.25 * rho * nu * alpha + (2 - 3 * rho * rho) / 24 * nu * nu) * t)
            d1 = (WorksheetFunction.Ln(F0 / k) + impv * impv / 2 * t) / (impv * Sqr(t))
            var = impv * impv * t
            
            rng_surf.Offset(j, i).Value = impv
            rng_var_surf.Offset(j, i).Value = impv * impv * t
            If j > 1 Then
                rng_var_surf_diff.Offset(j, i).Value = rng_var_surf.Offset(j, i).Value - rng_var_surf.Offset(j - 1, i).Value
            End If
            
            K_p = k * Exp(K_eps)
            y = nu / alpha * WorksheetFunction.Ln(F0 / K_p)
            If Abs(y) <= 0.01 Then
                f = 1 - rho * y / 2 + (-rho * rho / 4 + 1 / 6) * y * y
            Else
                fs = Sqr(1 - 2 * rho * y + y * y)
                fl = WorksheetFunction.Ln((fs - rho + y) / (1 - rho))
                f = y / fl
            End If
            impv_Kp = alpha * f * (1 + (0.25 * rho * nu * alpha + (2 - 3 * rho * rho) / 24 * nu * nu) * t)
            var_Kp = impv_Kp * impv_Kp * t
            
            K_m = k * Exp(-K_eps)
            y = nu / alpha * WorksheetFunction.Ln(F0 / K_m)
            If Abs(y) <= 0.01 Then
                f = 1 - rho * y / 2 + (-rho * rho / 4 + 1 / 6) * y * y
            Else
                fs = Sqr(1 - 2 * rho * y + y * y)
                fl = WorksheetFunction.Ln((fs - rho + y) / (1 - rho))
                f = y / fl
            End If
            impv_Km = alpha * f * (1 + (0.25 * rho * nu * alpha + (2 - 3 * rho * rho) / 24 * nu * nu) * t)
            var_Km = impv_Km * impv_Km * t
            
            y = nu_p / alpha_p * WorksheetFunction.Ln(F0_p / k)
            If Abs(y) <= 0.01 Then
                f = 1 - rho_p * y / 2 + (-rho_p * rho_p / 4 + 1 / 6) * y * y
            Else
                fs = Sqr(1 - 2 * rho_p * y + y * y)
                fl = WorksheetFunction.Ln((fs - rho_p + y) / (1 - rho_p))
                f = y / fl
            End If
            impv_tp = alpha_p * f * (1 + (0.25 * rho_p * nu_p * alpha_p + (2 - 3 * rho_p * rho_p) / 24 * nu_p * nu_p) * (t + t_eps))
            var_tp = impv_tp * impv_tp * (t + t_eps)
            
            y = nu_m / alpha_m * WorksheetFunction.Ln(F0_m / k)
            If Abs(y) <= 0.01 Then
                f = 1 - rho_m * y / 2 + (-rho_m * rho_m / 4 + 1 / 6) * y * y
            Else
                fs = Sqr(1 - 2 * rho_m * y + y * y)
                fl = WorksheetFunction.Ln((fs - rho_m + y) / (1 - rho_m))
                f = y / fl
            End If
            impv_tm = alpha_m * f * (1 + (0.25 * rho_m * nu_m * alpha_m + (2 - 3 * rho_m * rho_m) / 24 * nu_m * nu_m) * (t - t_eps))
            var_tm = impv_tm * impv_tm * (t - t_eps)
            
            dvdt = (impv_tp * impv_tp - impv * impv) / (2 * t_eps * impv)
            lv_nom1 = impv / t + 2 * dvdt
            lv_denom1 = k * k * (d2vdK2 - d1 * Sqr(t) * dvdK * dvdK + 1 / impv * (1 / k / Sqr(t) + d1 * dvdK) * (1 / k / Sqr(t) + d1 * dvdK))
            rng_lv_surf.Offset(j, i).Value = Sqr(lv_nom1 / lv_denom1)
            
            y = WorksheetFunction.Ln(k / F0)
            If var_tp - var_tm > 0 Then
                dwdt = (var_tp - var_tm) / (2 * t_eps)
            ElseIf var_tp - var > 0 Then
                dwdt = (var_tp - var) / (t_eps)
            ElseIf var - var_tm > 0 Then
                dwdt = (var - var_tm) / (t_eps)
            End If
                
            dwdy = (var_Kp - var_Km) / (2 * K_eps)
            d2wdy2 = (var_Kp - 2 * var + var_Km) / (K_eps * K_eps)
            lv_nom2 = dwdt
            lv_denom2 = 1# - y / var * dwdy + 0.25 * (-0.25 - 1# / var + y * y / var / var) * dwdy * dwdy + 0.5 * d2wdy2
            rng_lv_surf2.Offset(j, i).Value = Sqr(lv_nom2 / lv_denom2)
        Next i
        
        j = j + 1
    Loop

End Sub

'Subroutine: Fit SABR parameters from bunch of data
Sub SABRParamStore()

    Dim i As Integer, j As Integer, k1 As Integer, k2 As Integer, k3 As Integer
    Dim fn_folder As String, fn_src As String
    Dim rng_dest As Range, rng_src As Range, rng_result As Range, rng_result_adj As Range, rng_result_ext As Range
    Dim dt As Date
    Dim t(1 To 13) As Double, r(1 To 13) As Double
    
    dt = DateSerial(2014, 10, 1)
    fn_folder = "C:\Users\Administrator\Downloads\optdata\KOSPI\"
    Set rng_dest = Worksheets("Implied Vol").Range("A4")
    Set rng_result = Worksheets("SABR param").Range("A1")
    Set rng_result_adj = Worksheets("SABR param").Range("O1")
    Set rng_result_ext = Worksheets("SABR param").Range("X1")
    rng_result.Offset(0, 0).Value = "Date"
    rng_result.Offset(0, 1).Value = "TTM"
    rng_result.Offset(0, 2).Value = "F"
    rng_result.Offset(0, 3).Value = "rf"
    rng_result.Offset(0, 4).Value = "rf_spot"
    rng_result.Offset(0, 5).Value = "alpha"
    rng_result.Offset(0, 6).Value = "rho"
    rng_result.Offset(0, 7).Value = "nu"
    rng_result_adj.Offset(0, 0).Value = "Date"
    rng_result_adj.Offset(0, 1).Value = "TTM"
    rng_result_adj.Offset(0, 2).Value = "F"
    rng_result_adj.Offset(0, 3).Value = "rf"
    rng_result_adj.Offset(0, 4).Value = "rf_spot"
    rng_result_adj.Offset(0, 5).Value = "alpha"
    rng_result_adj.Offset(0, 6).Value = "rho"
    rng_result_adj.Offset(0, 7).Value = "nu"
    rng_result_ext.Offset(0, 0).Value = "Date"
    rng_result_ext.Offset(0, 1).Value = "TTM"
    rng_result_ext.Offset(0, 2).Value = "F"
    rng_result_ext.Offset(0, 3).Value = "rf_spot"
    rng_result_ext.Offset(0, 4).Value = "alpha"
    rng_result_ext.Offset(0, 5).Value = "rho"
    rng_result_ext.Offset(0, 6).Value = "nu"
    
    Dim m As Double, n As Double
    Dim x As Double, y As Double, xx As Double, xy As Double, avgx As Double, avgy As Double, count As Double
    k1 = 1
    k2 = 1
    k3 = 1
    m = 1
    Do While dt < DateSerial(2014, 12, 1)
        Worksheets("Implied Vol").Range("B1").Value = Format(dt, "yyyy-mm-dd")
        i = 1
        x = 0
        y = 0
        xx = 0
        xy = 0
        fn_src = "KOSPI_ExchData_" & Format(dt, "yymmdd") & ".xlsx"
        If Dir(fn_folder & fn_src) <> "" Then
            Range("OptionData").ClearContents
            Range("OptionMarketParam").ClearContents
            Range("SABRFitParam").ClearContents
            Range("SABRFitParamAdj").ClearContents
            Range("SABRFitParamExt").ClearContents
            
            Workbooks.Open Filename:=fn_folder & fn_src
            Set rng_src = Workbooks(fn_src).Worksheets(1).Range("A1")
            Do While rng_src.Offset(i, 0) > 0
                For j = 0 To 6
                    rng_dest.Offset(i, j).Value = rng_src.Offset(i, j).Value
                Next j
                i = i + 1
            Loop
            
            Workbooks(fn_src).Close
            
            Call ExtractImpForward
            Call BlackVol
            Call SABRSampleSelect
            Call SABRFit
            
            j = 1
            Do While Range("OptionMarketParam")(j, 1).Value > 0
                If Range("SABRFitParam")(j, 2) > 0 Then
                    rng_result.Offset(k1, 0).Value = Format(dt, "yyyy-mm-dd")
                    rng_result.Offset(k1, 1).Value = Range("OptionMarketParam")(j, 1)
                    rng_result.Offset(k1, 2).Value = Range("OptionMarketParam")(j, 2)
                    rng_result.Offset(k1, 3).Value = Range("OptionMarketParam")(j, 3)
                    rng_result.Offset(k1, 4).Value = Range("OptionMarketParam")(j, 4)
                    rng_result.Offset(k1, 5).Value = Range("SABRFitParam")(j, 2)
                    rng_result.Offset(k1, 6).Value = Range("SABRFitParam")(j, 3)
                    rng_result.Offset(k1, 7).Value = Range("SABRFitParam")(j, 4)
                    k1 = k1 + 1
                End If
                j = j + 1
            Loop

            If dt >= DateSerial(2014, 11, 3) Then
                n = 1
                count = 0
                Do While rng_result.Offset(m, 9).Value < dt
                    m = m + 1
                Loop
                Do While rng_result.Offset(n, 0).Value <= rng_result.Offset(m, 9).Value And rng_result.Offset(n, 0).Value > 0
                    If rng_result.Offset(n, 0).Value >= rng_result.Offset(m - 19, 9).Value And rng_result.Offset(n, 1).Value > 5 Then
                        x = x + WorksheetFunction.Ln(CDbl(rng_result.Offset(n, 1).Value))
                        y = y + WorksheetFunction.Ln(rng_result.Offset(n, 7).Value)
                        xx = xx + WorksheetFunction.Ln(rng_result.Offset(n, 1).Value) * WorksheetFunction.Ln(rng_result.Offset(n, 1).Value)
                        xy = xy + WorksheetFunction.Ln(rng_result.Offset(n, 1).Value) * WorksheetFunction.Ln(rng_result.Offset(n, 7).Value)
                        count = count + 1
                    End If
                    n = n + 1
                Loop
                avgx = x / count
                avgy = y / count
                rng_result.Offset(m, 10).Value = (xy - avgx * y - x * avgy + count * avgx * avgy) / (xx - 2 * avgx * x + count * avgx * avgx)
                rng_result.Offset(m, 11).Value = avgy - rng_result.Offset(m, 10).Value * avgx
                
                Call SABRFitAdj
                j = 1
                Do While Range("OptionMarketParam")(j, 1).Value > 0
                    If Range("SABRFitParamAdj")(j, 2) > 0 Then
                        rng_result_adj.Offset(k2, 0).Value = Format(dt, "yyyy-mm-dd")
                        rng_result_adj.Offset(k2, 1).Value = Range("OptionMarketParam")(j, 1)
                        rng_result_adj.Offset(k2, 2).Value = Range("OptionMarketParam")(j, 2)
                        rng_result_adj.Offset(k2, 3).Value = Range("OptionMarketParam")(j, 3)
                        rng_result_adj.Offset(k2, 4).Value = Range("OptionMarketParam")(j, 4)
                        rng_result_adj.Offset(k2, 5).Value = Range("SABRFitParamAdj")(j, 2)
                        rng_result_adj.Offset(k2, 6).Value = Range("SABRFitParamAdj")(j, 3)
                        rng_result_adj.Offset(k2, 7).Value = Range("SABRFitParamAdj")(j, 4)
                        k2 = k2 + 1
                    End If
                    j = j + 1
                Loop
                
                Call SABRParamExt
                j = 1
                Do While Range("SABRFitParamExt")(j, 1).Value > 0
                    rng_result_ext.Offset(k3, 0).Value = Format(dt, "yyyy-mm-dd")
                    rng_result_ext.Offset(k3, 1).Value = Range("SABRFitParamExt")(j, 1)
                    rng_result_ext.Offset(k3, 2).Value = Range("SABRFitParamExt")(j, 2)
                    rng_result_ext.Offset(k3, 3).Value = Range("SABRFitParamExt")(j, 3)
                    rng_result_ext.Offset(k3, 4).Value = Range("SABRFitParamExt")(j, 4)
                    rng_result_ext.Offset(k3, 5).Value = Range("SABRFitParamExt")(j, 5)
                    rng_result_ext.Offset(k3, 6).Value = Range("SABRFitParamExt")(j, 6)
                    k3 = k3 + 1
                    j = j + 1
                Loop
                
                Call LocalVol
            End If
        End If
            
        dt = dt + 1
    Loop
    

End Sub


'test routine
Sub LocalVol_NoParam()

    Dim i As Integer, j As Integer
    Dim vs As VolSurf
    Dim F0(1 To 9) As Single, S0 As Single, r_avg As Single, q As Single
    Dim rng_vol As Range, dt_vol As Date
    Dim rng_curve As Range, ind_curve As Long, t(1 To 13) As Double, r(1 To 13) As Double
        
    ind_curve = 1
    
    Set rng_vol = Worksheets("KAP ImpVol (KOSPI)").Range("A1")
    dt_vol = rng_vol.Value
    S0 = 257.64
    
    Set rng_curve = Worksheets("Curve History (KRW)").Range("A1")
    For i = 1 To 13
        t(i) = rng_curve.Offset(0, i).Value
    Next i
    Do While rng_curve.Offset(ind_curve + 1, 0).Value <= dt_vol
        ind_curve = ind_curve + 1
    Loop
    For i = 1 To 13
        r(i) = rng_curve.Offset(ind_curve, i).Value
    Next i
    
    For i = 1 To 9
        vs.t(i) = rng_vol.Offset(i, 0).Value
        r_avg = RateInteg(t, r, CDbl(vs.t(i)))
        q = 0.011657
        F0(i) = S0 * Exp((r_avg - q) * vs.t(i) / 360)
        For j = 1 To 17
            vs.vol((i - 1) * 17 + j) = rng_vol.Offset(i, j) / 100
        Next j
    Next i
    
    Dim vs_res As VolSurf
    vs_res = LocalVolCalcVar(vs, F0(1), S0)
    
    Dim rng_lv As Range
    Set rng_lv = Worksheets("KAP LV (KOSPI)").Range("A1")
    For i = 1 To 9
        For j = 1 To 17
            rng_lv.Offset(i, j).Value = vs_res.vol((i - 1) * 17 + j)
        Next j
    Next i

End Sub



'test routine
Sub SABRVolFit()

Dim i As Long, j As Long, l As Long, m As Long, size As Long
Dim data As SABRData, SABRp0 As SABRParam, SABRp1 As SABRParam
Dim opt_blank As OptData

i = 1
j = 1
m = 1
Do While Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value <= DateSerial(2014, 11, 28) And i < 3000 And IsDate(Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value)
    i = i + 1
    For j = 1 To 9
        For l = 1 To UBound(data.opt)
            data.opt(l) = opt_blank
        Next l
    
        data.p.ttm = Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value
        data.p.f = 1
        data.p.rf = 0
            
        data.size = 17
        For l = 1 To 17
            data.opt(l).ttm = data.p.ttm
            data.opt(l).Strike = Worksheets("KAP ImpVol (HSCEI)").Cells(1, l + 1).Value
            data.opt(l).CP = 1
            data.opt(l).impv = Worksheets("KAP ImpVol (HSCEI)").Cells(i, l + 1).Value / 100
        Next l
    
        ' Initial SABR parameter
        data.p.alpha = 0.1
        data.p.rho = -0.5
        data.p.nu = 0.5
        
        ' Call C++ DLL
        SABRp1 = SABRCalc_AllParam(data)
        
        ' Arrange result
        Worksheets("KAP ImpVol (HSCEI)").Cells(i, 19).Value = SABRp1.alpha
        Worksheets("KAP ImpVol (HSCEI)").Cells(i, 20).Value = SABRp1.rho
        Worksheets("KAP ImpVol (HSCEI)").Cells(i, 21).Value = SABRp1.nu
        
        i = i + 1
    Next j
Loop

End Sub

'test routine
Sub LocalVol_bySABRParam()

Dim i As Long, j As Long, l As Long, m As Long, size As Long
Dim data As SABRData, SABRp0 As SABRParam, SABRp1 As SABRParam
Dim opt_blank As OptData
Dim dt_vol As Date
Dim t_curve(1 To 13) As Double, r_curve(1 To 13) As Double, ind_curve As Long, r_avg As Double
Dim S0 As Double, q As Double, ind_stock As Long
Dim p0 As SABRParamSeries, ind_lv As Long

For i = 1 To 13
    t_curve(i) = Worksheets("Curve History (HKD)").Cells(1, i + 1).Value
Next i

ind_curve = 2
ind_stock = 3
ind_lv = 1

i = 1
j = 1
m = 1
Do While Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value <= DateSerial(2014, 11, 28) And i < 3000 And IsDate(Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value)

    Worksheets("KAP LV (HSCEI)").Cells(i, 1).Value = Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value
    For l = 1 To 17
        Worksheets("KAP LV (HSCEI)").Cells(i, l + 1).Value = Worksheets("KAP ImpVol (HSCEI)").Cells(i, l + 1).Value
    Next l

    Do While Worksheets("Curve History (HKD)").Cells(ind_curve, 1).Value <= Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value
        ind_curve = ind_curve + 1
    Loop
    If Worksheets("Curve History (HKD)").Cells(ind_curve, 1).Value > Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value Then
        ind_curve = ind_curve - 1
    End If
    For j = 1 To 13
        r_curve(j) = Worksheets("Curve History (HKD)").Cells(ind_curve, 1 + j).Value
    Next j
    
    Do While Worksheets("Index History").Cells(ind_stock, 1).Value <= Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value
        ind_stock = ind_stock + 1
    Loop
    If Worksheets("Index History").Cells(ind_stock, 1).Value > Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value Then
        ind_stock = ind_stock - 1
    End If
    S0 = Worksheets("Index History").Cells(ind_stock, 5).Value
    q = Worksheets("Index History").Cells(ind_stock, 6).Value
    
    i = i + 1
    p0.size = 9
    For j = 1 To 9
        p0.t(j) = Worksheets("KAP ImpVol (HSCEI)").Cells(i, 1).Value
        r_avg = RateInteg(t_curve, r_curve, CDbl(p0.t(j)))
        p0.p(j).f = S0 * Exp((r_avg - q) * CDbl(p0.t(j)) / 360)
        p0.p(j).rf = RateInterp(t_curve, r_curve, CDbl(p0.t(j)))
        p0.p(j).alpha = Worksheets("KAP ImpVol (HSCEI)").Cells(i, 19).Value
        p0.p(j).rho = Worksheets("KAP ImpVol (HSCEI)").Cells(i, 20).Value
        p0.p(j).nu = Worksheets("KAP ImpVol (HSCEI)").Cells(i, 21).Value
        
        i = i + 1
    Next j
    
    Dim vs As VolSurf
    vs = LocalVolCalcSABR(p0, CSng(S0), CSng(q))
    
    For j = 1 To 9
        Worksheets("KAP LV (HSCEI)").Cells(ind_lv + 1, 1).Value = Worksheets("KAP ImpVol (HSCEI)").Cells(ind_lv + 1, 1).Value
        For l = 1 To 17
            Worksheets("KAP LV (HSCEI)").Cells(ind_lv + 1, l + 1).Value = vs.vol((j - 1) * 17 + l)
        Next l
        ind_lv = ind_lv + 1
    Next j
    ind_lv = ind_lv + 1
    
Loop

End Sub



' Function: calculate average of integrated interest rate by linear interpolation
Function RateInteg(t() As Double, r() As Double, t0 As Double) As Double

Dim i As Integer, j As Integer, r0 As Double, r_interp As Double, t_prior As Double, r_prior As Double
i = 1
t_prior = 0
r_prior = r(1)
Do While t(i) < t0
    i = i + 1
Loop

If i = 1 Then
    r0 = r(1) * t0
Else
    For j = 1 To i - 1
        r0 = r0 + (r_prior + r(j)) / 2# * (t(j) - t_prior)
        t_prior = t(j)
        r_prior = r(j)
    Next j
    
    r_interp = r_prior + (r(i) - r_prior) / (t(i) - t_prior) * (t0 - t_prior)
    r0 = r0 + (r_interp + r_prior) / 2# * (t0 - t_prior)
End If

RateInteg = r0 / t0

End Function

' Function: calculate spot interest rate by linear interpolation / nearest extrapolation
Function RateInterp(t() As Double, r() As Double, t0 As Double) As Double

Dim i As Integer, r0 As Double

i = 1
Do While t(i) < t0
    i = i + 1
Loop

If i = 1 Then
    r0 = r(1)
Else
    r0 = r(i - 1) + (r(i) - r(i - 1)) / (t(i) - t(i - 1)) * (t0 - t(i - 1))
End If

RateInterp = r0

End Function

